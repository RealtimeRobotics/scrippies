#!/bin/sh

# scrippies/configure-rosdep

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $0 [OPTION]... PACKAGE_NAME...
Trick rosdep into using given Debian packages.

Options:

    -h    print usage and exit

Examples:

    \$ $0 nodejs

    \$ $0 librealsense2-dkms

EOF
}

# $1 : package_name
configure_rosdep() {
    # vet the given package name
    local pkgname="$1"
    if ! apt-cache policy "${pkgname}" >/dev/null; then
        error "missing package: ${pkgname}"
        return 1
    fi

    # For the given package name, generate "rosdep yaml" file that declares an
    # eponymous ROS package package.
    local rosdep_yaml="/var/lib/rosdep/${pkgname}.yaml"
    info "generating ${rosdep_yaml}"
    mkdir -p "$(dirname "${rosdep_yaml}")"
    cat >"${rosdep_yaml}" <<EOF
# ${rosdep_yaml}
#
# This is a generated rosdep yaml file.
#
# https://docs.ros.org/independent/api/rosdep/html/rosdep_yaml_format.html
#
# generator : ${this}
# user      : $(id)
# date      : $(date -u +"%Y-%m-%dT%H:%M:%SZ")

${pkgname}:
EOF

    # bloom v0.8.0 started vetting package names for every supported OS; we
    # need to tell bigger lies
    #
    # * https://github.com/ros-infrastructure/bloom/releases/tag/0.8.0
    # * https://github.com/ros-infrastructure/bloom/commit/c247a1320172867ce87c94939df1f166d25a0bb0#diff-de0a9b67ffe2874a076b5fdb15bad484
    # * https://docs.ros.org/independent/api/rosdep/html/rosdep_yaml_format.html#os-name-identifiers-and-supported-package-managers
    local osname=""
    for osname in arch cygwin debian fedora freebsd gentoo opensuse osx rhel ubuntu; do
        cat >>"${rosdep_yaml}" <<EOF
  ${osname}: [${pkgname}]
EOF
    done

    # Generate a "rosdep sources list" file that references the freshly
    # generated rosdep yaml.
    local rosdep_sources_list="/etc/ros/rosdep/sources.list.d/${pkgname}.list"
    info "generating ${rosdep_sources_list}"
    mkdir -p "$(dirname "${rosdep_sources_list}")"
    cat >"${rosdep_sources_list}" <<EOF
# ${rosdep_sources_list}
#
# This is a generated rosdep sources list file.
#
# https://docs.ros.org/independent/api/rosdep/html/sources_list.html
#
# generator : ${this}
# user      : $(id)
# date      : $(date -u +"%Y-%m-%dT%H:%M:%SZ")

yaml file://${rosdep_yaml}
EOF
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":h" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

if ! [ 0 -lt "$#" ]; then
    die "bad args"
fi

for arg in $@; do
    configure_rosdep "${arg}"
done
