#!/bin/sh

# scrippies/deb-guillotine

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly default_deb_cmd='find .'

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${control_tar:-}" "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]... DEB_FILE...
Execute arbitrary commands on DEB_FILE contents.

Options:
    -h        print usage and exit
    -c DEB_CMD    invoke DEB_CMD on contents of DEB_FILE (default: ${default_deb_cmd})

Examples:

    \$ $(basename ${this}) -c ${default_deb_cmd} path/to/foobar.deb

EOF
}

deb_guillotine() {
    # vet the given path as an extant Debian binary package
    local deb_file=""
    if ! deb_file="$(readlink -f "$1")"; then
        die "bad path: $1"
    fi
    if ! [ -f "${deb_file}" ]; then
        die "not a file: ${deb_file}"
    fi
    if ! file -b "${deb_file}" | grep -q 'Debian binary package'; then
        die "$(file "${deb_file}")"
    fi

    (
        # jump into a temp dir and extract Debian binary package
        cd "$(mktemp -dt "$(basename "${deb_file}").raw_extract.XXXXXX")"
        dpkg-deb --raw-extract "${deb_file}" .

        # find the whitelist if it exists
        local whitelist_headers="$(find . -type f -name whitelist-headers.txt)"
        if [ -f "${whitelist_headers}" ]; then
            info "found ${whitelist_headers}"
        else
            warning "missing whitelist-headers.txt: ${deb_file}"
            whitelist_headers="/dev/null"
        fi

        # enumerate headers, apply whitelist
        find . -type f -name '*.hpp' | sort | while read header; do
            if basename "${header}" | grep -qFxf "${whitelist_headers}"; then
                info "keeping: '${header}'"
            else
                warning "$(rm -v "${header}")"
            fi
        done

        # delete empty directories
        find . -type d -empty -print -delete

        # rebuild Debian binary package
        dpkg-deb --build . "${deb_file}"
    )
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":h" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

for arg in $@; do
    deb_guillotine "${arg}"
done

exit "$?"
