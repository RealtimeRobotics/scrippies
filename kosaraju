#!/bin/sh

# scrippies/kosaraju

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${here}").$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

readonly edges="$(mktemp -t edges.XXXXXX)"
cat >"${edges}" <"${1-/dev/stdin}"

# create the topological sort; save stderr to find cycles
readonly tsort_out="$(mktemp -t tsort_out.XXXXXX)"
readonly tsort_err="$(mktemp -t tsort_err.XXXXXX)"
tsort <"${edges}" >"${tsort_out}" 2>"${tsort_err}" || true

# remove edges that comprise cycles
sed -nr 's|^tsort: ([[:graph:]]+)$|\1|gp' "${tsort_err}" \
    | xargs -I{} sed -i "/^{}/d" "${edges}"

# transpose edges to create reverse edges
readonly redges="$(mktemp -t redges.XXXXXX)"
sed -r 's|^([[:graph:]]+)([[:space:]]+)([[:graph:]]+)$|\3\2\1|g' <"${edges}" >"${redges}"

# $1 : start node
# $2 : edge list
traverse() {
    if grep -q "^$1" <"$2"; then
        grep "^$1" <"$2" | while read curr next; do
            traverse "${next}" "$2"
        done
    else
        echo "$1"
    fi
}

# traverse the graph of reversed edges; print every dead end
while read pkg; do traverse "${pkg}" "${redges}"; done <"${tsort_out}" | sort -u

exit "$?"
