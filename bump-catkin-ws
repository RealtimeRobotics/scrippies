#!/bin/sh

# scrippies/bump-catkin-ws

set -eu

this="$(readlink -f "$0")"
readonly this="${this}"
whatami="$(basename "${this}")"
readonly whatami="${whatami}"
tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"
readonly tmpdir="${tmpdir}"

default_bump="patch"
readonly default_bump="${default_bump}"

log() { echo "${whatami}[$$]: $*" >&2; }
error() { log "ERROR: $*"; }
warning() { log "WARNING: $*"; }
info() { log "INFO: $*"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}" || true
    return "${status}"
}

usage() {
    cat <<EOF

Usage: $0 [OPTION]...
Bump the version in every package.xml file

Options:

    -h,--help       print help and exit
    -n,--dry-run    noop, don't actually do anything
    -C CATKIN_WS    run as if started in CATKIN_WS (default: \$PWD)
    --major         bump the version major number
    --minor         bump the version minor number
    --patch         bump the version patch number (this is the default)
    --git-commit    git commit the result of the version bump
    --git-tag       git tag the result of the git commit

Examples:

    \$ $0 -n

    \$ $0 -C \$PWD --major

    \$ $0 --minor

EOF
}

maybe_eval() {
    if [ "true" = "${requested_noop:-false}" ]; then
        info "noop skipping: $*"
    else
        info "executing: $*"
        eval "$@"
    fi
}

# $1 : title
# $2 : path
error_file() {
    if [ -s "$2" ]; then
        error "$1:"
        while read -r line; do
            error "    ${line}"
        done <"$2"
    else
        error "$1: [EMPTY]"
    fi
}

is_good_triplet() {
    echo "$@" | grep -Eq '^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while [ 0 -lt "$#" ]; do
    case "$1" in
        -h | --help)
            usage
            exit "$?"
            ;;
        -C)
            if [ -z "${2:-}" ]; then
                die "missing argument: $1"
            fi
            catkin_ws="$(readlink -f "$2")"
            if [ -z "${catkin_ws}" ]; then
                die "missing path: $2"
            fi
            if ! [ -d "${catkin_ws}" ]; then
                die "missing directory: $2"
            fi
            readonly catkin_ws="${catkin_ws}"
            shift
            ;;
        -n | --dry-run)
            readonly requested_noop="true"
            ;;
        --major)
            readonly bump="major"
            ;;
        --minor)
            readonly bump="minor"
            ;;
        --patch)
            readonly bump="patch"
            ;;
        --git-commit)
            readonly git_commit="true"
            ;;
        --git-tag)
            readonly git_tag="true"
            ;;
        *)
            die "bad option: $1"
            ;;
    esac
    shift
done

if [ -n "${catkin_ws:-}" ]; then
    info "catkin_ws: ${catkin_ws}"
else
    readonly catkin_ws="${PWD}"
    warning "defaulting catkin_ws: ${catkin_ws}"
fi

if [ -n "${bump:-}" ]; then
    info "bump: ${bump}"
else
    readonly bump="${default_bump}"
    warning "defaulting bump: ${bump}"
fi

################################################################################

cd "${catkin_ws}"

################################################################################

# find all CMakeLists.txt files
cmakelists_txt_list="$(mktemp -t cmakelists_txt_list.XXXXXX)"
readonly cmakelists_txt_list="${cmakelists_txt_list}"
git ls-files | grep -E '^([^/]*/)*CMakeLists[.]txt$' >"${cmakelists_txt_list}"
sort -uo "${cmakelists_txt_list}" "${cmakelists_txt_list}"

# find all package.xml files
package_xml_list="$(mktemp -t package_xml_list.XXXXXX)"
readonly package_xml_list="${package_xml_list}"
git ls-files | grep -E '^([^/]*/)*package[.]xml$' >"${package_xml_list}"
sort -uo "${package_xml_list}" "${package_xml_list}"

# find all CMakeLists.txt dirs
cmakelists_txt_dir_list="$(mktemp -t cmakelists_txt_dir_list.XXXXXX)"
readonly cmakelists_txt_dir_list="${cmakelists_txt_dir_list}"
xargs dirname <"${cmakelists_txt_list}" >"${cmakelists_txt_dir_list}"
sort -uo "${cmakelists_txt_dir_list}" "${cmakelists_txt_dir_list}"

# find all package.xml dirs
package_xml_dir_list="$(mktemp -t package_xml_dir_list.XXXXXX)"
readonly package_xml_dir_list="${package_xml_dir_list}"
xargs dirname <"${package_xml_list}" >"${package_xml_dir_list}"
sort -uo "${package_xml_dir_list}" "${package_xml_dir_list}"

# find all project dirs (have both CMakeLists.txt and package.xml)
project_dir_list="$(mktemp -t project_dir_list.XXXXXX)"
readonly project_dir_list="${project_dir_list}"
comm -12 "${package_xml_dir_list}" "${cmakelists_txt_dir_list}" >"${project_dir_list}"
sort -uo "${project_dir_list}" "${project_dir_list}"
if ! [ -s "${project_dir_list}" ]; then
    die "failed to discover any valid project dirs"
fi

comm -13 "${package_xml_dir_list}" "${cmakelists_txt_dir_list}" | while read -r dur; do
    warning "missing package.xml: ${dur}"
done
comm -23 "${package_xml_dir_list}" "${cmakelists_txt_dir_list}" | while read -r dur; do
    warning "missing CMakeLists.txt: ${dur}"
done

# generate list of good package.xml
sed 's,$,/package.xml,g' <"${project_dir_list}" >"${package_xml_list}"

# generate list of duples; each duple is version triplet and package.xml path
duples="$(mktemp -t duples.XXXXXX)"
readonly duples="${duples}"
while read -r package_xml; do
    triplet="$(
        sed -nr 's|.*<version>([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)</version>.*|\1|gp' \
            "${package_xml}"
    )"
    if [ -z "${triplet}" ]; then
        die "missing version triplet: ${package_xml}"
    fi
    printf '%s\t%s\n' "${triplet}" "${package_xml}"
done <"${package_xml_list}" >"${duples}"
sort -Vuo "${duples}" "${duples}"

triplet_list="$(mktemp -t triplet_list.XXXXXX)"
readonly triplet_list="${triplet_list}"
cut -f1 <"${duples}" >"${triplet_list}"
sort -Vuo "${triplet_list}" "${triplet_list}"

if ! [ -s "${triplet_list}" ]; then
    die "failed to parse any version triplets"
fi

if ! [ 1 -eq "$(wc -l <"${triplet_list}")" ]; then
    error "too many version triplets: $(paste -sd, <"${triplet_list}")"
    error_file 'versions in package.xml files' "${duples}"
    exit 1
fi

################################################################################

old_triplet="$(xargs <"${triplet_list}")"
readonly old_triplet="${old_triplet}"
if ! is_good_triplet "${old_triplet}"; then
    die "bad old_triplet: ${old_triplet}"
fi
info "old_triplet: ${old_triplet}"

old_major="$(echo "${old_triplet}" | cut -d. -f1)"
readonly old_major="${old_major}"
old_minor="$(echo "${old_triplet}" | cut -d. -f2)"
readonly old_minor="${old_minor}"
old_patch="$(echo "${old_triplet}" | cut -d. -f3)"
readonly old_patch="${old_patch}"

case "${bump}" in
    major)
        readonly new_major="$((old_major + 1))"
        readonly new_minor="0"
        readonly new_patch="0"
        ;;
    minor)
        readonly new_major="${old_major}"
        readonly new_minor="$((old_minor + 1))"
        readonly new_patch="0"
        ;;
    patch)
        readonly new_major="${old_major}"
        readonly new_minor="${old_minor}"
        readonly new_patch="$((old_patch + 1))"
        ;;
    *)
        die "bad bump: ${bump}"
        ;;
esac

if ! current_branch="$(git -C "${catkin_ws}" name-rev --name-only HEAD)"; then
    die "FAILURE: git -C ${catkin_ws} name-rev --name-only HEAD"
fi
readonly current_branch="${current_branch}"
info "current_branch: ${current_branch}"

if ! current_remote="$(git -C "${catkin_ws}" config "branch.${current_branch}.remote")"; then
    die "FAILURE: git -C ${catkin_ws} config branch.${current_branch}.remote"
fi
readonly current_remote="${current_remote}"
info "current_remote: ${current_remote}"

readonly cut_branch="release-${old_triplet}"
info "cut_branch: ${cut_branch}"

if git -C "${catkin_ws}" rev-parse --verify "${cut_branch}" >/dev/null 2>&1; then
    die "extant cut branch: ${cut_branch}"
fi

maybe_eval git -C "${catkin_ws}" branch --verbose "${cut_branch}" "${current_branch}"

maybe_eval git -C "${catkin_ws}" branch --set-upstream-to="${current_remote}" "${cut_branch}"

new_triplet="${new_major}.${new_minor}.${new_patch}"
readonly new_triplet="${new_triplet}"
info "new_triplet: ${new_triplet}"

# assumes we want to replace every instance of the old_triplet with the
# new_triplet; this is pretty aggressive and may collide with version strings
# that we _don't_ want to change
sed_expr="s|${old_major}\.${old_minor}\.${old_patch}|${new_major}\.${new_minor}\.${new_patch}|g"
readonly sed_expr="${sed_expr}"
if [ "true" = "${requested_noop:-false}" ]; then
    info "DRY run: modifying package.xml files"
    xargs sed -r -e "${sed_expr}" <"${package_xml_list}" >/dev/null
else
    info "WET run: modifying package.xml files"
    xargs sed -i -r -e "${sed_expr}" <"${package_xml_list}"
fi

if ! [ "true" = "${git_commit:-false}" ]; then
    info "stopping here because no --git-commit"
    exit "$?"
fi

GIT_AUTHOR_DATE="$(date -uIseconds)"
export GIT_AUTHOR_DATE
export GIT_COMMITTER_DATE="${GIT_AUTHOR_DATE}"
if [ "true" = "${requested_noop:-false}" ]; then
    info "DRY run: git commit"
    git -C "${catkin_ws}" commit --all --message="bump version ${new_triplet}" --dry-run || true
else
    info "WET run: git commit"
    git -C "${catkin_ws}" commit --all --message="bump version ${new_triplet}"
fi

if ! [ "true" = "${git_tag:-false}" ]; then
    info "stopping here because no --git-tag"
    exit "$?"
fi

cmd_git_tag="git -C \"${catkin_ws}\" tag --sign --message=\"tag version ${new_triplet}\" \"${new_triplet}\" HEAD"
readonly cmd_git_tag="${cmd_git_tag}"
if [ "true" = "${requested_noop:-false}" ]; then
    info "DRY run: ${cmd_git_tag}"
else
    info "WET run: ${cmd_git_tag}"
    eval "${cmd_git_tag}"
fi

exit "$?"
