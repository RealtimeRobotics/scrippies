#!/bin/sh

# scrippies/bump-catkin-ws

set -eu

readonly this="$(readlink -f "$0")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly default_bump="patch"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    local status="$?"
    rm -rf "${tmpdir}" || true
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $0 [OPTION]...
Bump the version in every package.xml file

Options:
    -h,--help       print help and exit
    -n,--dry-run    don't actually do anything
    -C CATKIN_WS    run as if started in CATKIN_WS (default: \$PWD)
    --major         bump the version major number
    --minor         bump the version minor number
    --patch         bump the version patch number (this is the default)

Examples:

    \$ $0 -n

    \$ $0 -C \$PWD --major

    \$ $0 --minor

EOF
}

is_good_triplet() {
    echo "$@" | grep -Eq '^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while [ 0 -lt "$#" ]; do
    case "$1" in
        -h|--help)
	        usage
            exit "$?"
            ;;
        -C)
            if ! [ -n "${2:-}" ]; then
                die "missing argument: $1"
            fi
            catkin_ws="$(readlink -f "$2")"
            if ! [ -n "${catkin_ws}" ]; then
                die "missing path: $2"
            fi
            if ! [ -d "${catkin_ws}" ]; then
                die "missing directory: $2"
            fi
            readonly catkin_ws="${catkin_ws}"
            ;;
        -n|--dry-run)
	        readonly dry_run="true"
            ;;
        --major)
            readonly bump="major"
            ;;
        --minor)
            readonly bump="minor"
            ;;
        --patch)
            readonly bump="patch"
            ;;
        *)
            die "bad option: $1"
            ;;
    esac
    shift
done

if [ -n "${catkin_ws:-}" ]; then
    info "catkin_ws: ${catkin_ws}"
else
    readonly catkin_ws="${PWD}"
    warning "defaulting catkin_ws: ${catkin_ws}"
fi

if [ -n "${bump:-}" ]; then
    info "bump: ${bump}"
else
    readonly bump="${default_bump}"
    warning "defaulting bump: ${bump}"
fi

# assumes a bloomable catkin workspace; i.e., every `package.xml` has a
# `<version>...</version>` tag and every version value is identical across all
# `package.xml` files.
readonly package_xml_list="$(mktemp -t package_xml_list.XXXXXX)"
find "${catkin_ws}/src" -type f -name 'package.xml' >"${package_xml_list}"

readonly triplet_list="$(mktemp -t triplet_list.XXXXXX)"
xargs sed -nr \
     's|.*<version>([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)</version>.*|\1|gp' \
     <"${package_xml_list}" >"${triplet_list}"
sort -uo "${triplet_list}" "${triplet_list}"

if ! [ 1 -eq "$(wc -l <"${triplet_list}")" ]; then
    die "bad triplet list"
fi

readonly old_triplet="$(xargs <"${triplet_list}")"
if ! is_good_triplet "${old_triplet}"; then
    die "bad old_triplet: ${old_triplet}"
fi

readonly old_major="$(echo "${old_triplet}" | cut -d. -f1)"
readonly old_minor="$(echo "${old_triplet}" | cut -d. -f2)"
readonly old_patch="$(echo "${old_triplet}" | cut -d. -f3)"

case "${bump}" in
    major)
        readonly new_major="$((${old_major} + 1))"
        readonly new_minor="0"
        readonly new_patch="0"
        ;;
    minor)
        readonly new_major="${old_major}"
        readonly new_minor="$((${old_minor} + 1))"
        readonly new_patch="0"
        ;;
    patch)
        readonly new_major="${old_major}"
        readonly new_minor="${old_minor}"
        readonly new_patch="$((${old_patch} + 1))"
        ;;
    *)
        die "bad bump: ${bump}"
        ;;
esac

if [ "true" = "${dry_run:-false}" ]; then
    sed_opts=""
else
    sed_opts="-i"
fi

# assumes we want to replace every instance of the old_triplet with the
# new_triplet; this is pretty aggressive and may collide with version strings
# that we _don't_ want to change
while read package_xml; do
    sed -r ${sed_opts} \
        "s|${old_major}\.${old_minor}\.${old_patch}|${new_major}\.${new_minor}\.${new_patch}|g" \
        "${package_xml}"
done <"${package_xml_list}"

exit "$?"
