#!/bin/sh

# scrippies/tar-deterministic

set -eu

readonly this="$(readlink -f "$0")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $*" >&2; }
error() { log "ERROR: $*"; }
warning() { log "WARNING: $*"; }
info() { log "INFO: $*"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF

Usage: $0 [OPTION]...
Create a deterministic tarball from working directory contents.

Options:

    -h            print this usage and return success
    -C WORKDIR    run as if started in WORKDIR (default: \$PWD)
    -m MTIME      override mtime (default: latest discovered)
    -o OUTFILE    write to OUTFILE (default: \$WORKDIR.tar)

Examples:

    \$ $0

    \$ $0 -C foo/bar

    \$ $0 -C foo/bar -o foobar_0123.tar

    \$ $0 -C foo/bar -o foobar_0123.tar -m "2019-06-05 18:03:36"

Notes:

    * MTIME must be something \`date -d\` understands.

References:

    * https://reproducible-builds.org/docs/archives

EOF
}

vet_workdir() {
    # shellcheck disable=SC2039
    local result=""
    if ! result="$(readlink -f "$1")"; then
        error "bad path: $1"
        return 1
    fi
    if ! [ -d "${result}" ]; then
        error "not a directory: ${result}"
        return 1
    fi
    echo "${result}"
    return 0
}

vet_outfile() {
    # shellcheck disable=SC2039
    local result=""
    if ! result="$(readlink -f "$1")"; then
        error "bad path: $1"
        return 1
    fi
    if [ -f "${result}" ]; then
        warning "will overwrite: ${result}"
    fi
    echo "${result}"
    return 0
}

vet_mtime() {
    # shellcheck disable=SC2039
    local result=""
    if ! result="@$(date -d "$1" +%s)"; then
        error "bad mtime: $1"
        return 1
    fi
    echo "${result}"
    return 0
}

# $1 : dir
get_default_mtime() (
    cd "$1"
    find . \
        \( \
        ! -type d \
        -o \
        \( -links 2 -exec sh -c '
            is_empty() (
                cd "$1"
                set -- .[!.]* ; test -f "$1" && return 1
                set -- ..?* ; test -f "$1" && return 1
                set -- * ; test -f "$1" && return 1
                return 0
            )
            is_empty "$0"' {} \; \
        \) \
        \) -exec stat -c'@%Y' {} \; \
        | LC_ALL=C sort -n \
        | tail -1 \
        | grep -Eox '@[[:digit:]]+'
)

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hC:m:o:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        C) workdir="${OPTARG}" ;;
        m) mtime="${OPTARG}" ;;
        o) outfile="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((OPTIND - 1))"

# workdir
if [ -z "${workdir:-}" ]; then
    workdir="${PWD}"
    warning "defaulted workdir: ${workdir}"
fi
if ! workdir="$(vet_workdir "${workdir}")"; then
    die "FAILURE: vet_workdir ${workdir}"
fi
readonly workdir="${workdir}"
info "workdir: ${workdir}"

# mtime
if [ -z "${mtime:-}" ]; then
    if ! mtime="$(get_default_mtime "${workdir}")"; then
        die "FAILURE: get_default_mtime ${workdir}"
    fi
    warning "discovered mtime: ${mtime}"
fi
if ! mtime="$(vet_mtime "${mtime}")"; then
    die "FAILURE: vet_mtime ${mtime}"
fi
readonly mtime="${mtime}"
info "mtime: ${mtime} ($(date -uIs -d "${mtime}"))"

# outfile
if [ -z "${outfile:-}" ]; then
    outfile="${workdir}.tar"
    warning "defaulted outfile: ${outfile}"
fi
if ! outfile="$(vet_outfile "${outfile}")"; then
    die "FAILURE: vet_outfile ${outfile}"
fi
readonly outfile="${outfile}"
info "outfile: ${outfile}"

# ###############################################
# Explanation for a horrible little shell snippet
# ###############################################
#
# `--pax-option "exthdr.name=%d/PaxHeaders.0/%f"`
#
# If tar tries to write a pax header, then this option should keep the PID
# (which is not deterministic) out of the archive. The golang folks do this, so
# it seems like a generally good idea for any tar implementation, not just GNU.
#
# * https://groups.google.com/forum/#!msg/golang-dev/8mY37Lc-AsQ/xC2oVQ2iEwAJ
# * https://github.com/golang/go/issues/12358
#
#
# `--pax-option="delete=atime"`
# `--pax-option="delete=ctime"`
#
# This is some sillyness to force both GNU tar v1.28 (xenial) and v1.29
# (bionic) to deterministically create identical archives; i.e., any two with
# identical content will have identical checksums. This turns out to be Really
# Difficult.
#
# Here, with the `--pax-option=delete=atime,delete=ctime` options, I'm asking
# `tar` to keep the access and change timestamps out of the archive. Based on
# my testing, --pax-option=delete=mtime has no effect. For reasons that escape
# me, this is necessary to stop GNU tar v1.29 from writing the Pax
# Header. Conversely, GNU tar v1.28 seems happy to omit the Pax Header under
# all the conditions I tested.
#
#
# `--mtime="${mtime}"`
#
# Set the modification time for all members to the given value
#
# * https://www.gnu.org/software/tar/manual/tar.html#SEC147
truncate -s0 "${outfile}"
(
    cd "${workdir}"
    find . \
        \( \
        ! -type d \
        -o \
        \( -links 2 -exec sh -c '
            is_empty () (
                cd "$1"
                set -- .[!.]* ; test -f "$1" && return 1
                set -- ..?* ; test -f "$1" && return 1
                set -- * ; test -f "$1" && return 1
                return 0
            )
            is_empty "$0"' {} \; \
        \) \
        \) -print \
        | LC_ALL=C sort \
        | sed 's/./\\&/g' \
        | xargs tar \
            --format=pax \
            --group=0 \
            --mtime="${mtime}" \
            --numeric-owner \
            --owner=0 \
            --pax-option="delete=atime" \
            --pax-option="delete=ctime" \
            --pax-option="exthdr.name=%d/PaxHeaders.0/%f" \
            -rf "${outfile}"
)

exit "$?"
