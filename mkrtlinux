#!/bin/sh

# scrippies/mkrtlinux

set -euvx

readonly this="$(readlink -f "$0")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly cachedir="${PWD}/cache.d"

log() { echo "${whatami}[$$]: $*" >&2; }
error() { log "ERROR: $*"; }
warning() { log "WARNING: $*"; }
info() { log "INFO: $*"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}" || true
    if command -v docker >/dev/null 2>&1; then
        docker system prune --force --filter until=6h || true
        docker volume prune -f || true
    fi
    return "${status}"
}

usage() {
    cat <<EOF

Usage: $0 [OPTION]... [-- MAKE_ARG...]
Build a Debian package for a PREEMPTRT-patched linux kernel.

Options:

    -h                 print this usage and return success
    -D DISTRIBUTION    override DISTRIBUTION (default: detected from host)
    -V VERSION         patch and build VERSION (default: inferred from DISTRIBUTION)

Examples:

    \$ $0 -h

    \$ $0 

    \$ $0 -V 4.1 -- -j8

    \$ $0 -D bionic

    \$ $0 -D focal -V 5.9

Notes:

    * VERSION must be one listed here: https://www.kernel.org/pub/linux/kernel/projects/rt/

EOF
}

good_link() {
    wget -q --method=HEAD "$1"
}

vet_version() {
    if ! good_link "https://www.kernel.org/pub/linux/kernel/projects/rt/$1/"; then
        error "broken link: https://www.kernel.org/pub/linux/kernel/projects/rt/$1/"
        return 1
    fi
    echo "$1"
    return 0
}

detect_distribution() {
    if ! [ -f /etc/os-release ]; then
        error "missing file: /etc/os-release"
        return 1
    fi
    # shellcheck disable=SC2039
    local result=""
    if ! result="$(grep -Eom1 '^VERSION_CODENAME=[[:lower:]]+$' /etc/os-release)"; then
        error "undefined VERSION_CODENAME: /etc/os-release"
        return 1
    fi
    echo "${result#VERSION_CODENAME=}"
}

# $1 : distribution
infer_version() {
    # Use the version from the rt list that is nearest (without going under)
    # that of the released version.
    # https://www.kernel.org/pub/linux/kernel/projects/rt/
    # https://en.wikipedia.org/wiki/Ubuntu_version_history#Table_of_versions
    case "$1" in
        xenial) vet_version "4.4" ;;
        bionic) vet_version "4.16" ;;
        focal) vet_version "5.4" ;;
        *)
            error "unknown distribution: \"$1\""
            return 1
            ;;
    esac
}

# $1 : uri
uri_dest() {
    echo "${cachedir}/${1#*://}"
}

# $1 : uri
wget_cache() {
    wget \
        --no-clobber \
        --force-directories \
        --directory-prefix="${cachedir}" \
        "$1"
}

# $1 : uri
wget_cache_gpgv() (
    wget_cache "$1"
    wget_cache "$(dirname "$1")/sha256sums.asc"
    cd "$(dirname "$(uri_dest "$1")")"
    if gpg -vv --verify --trust-model=always --output=- sha256sums.asc >"sha256sums"; then
        info "verified signature: ${PWD}/sha256sums.asc"
    else
        warning "unverified signature: ${PWD}/sha256sums.asc"
    fi
    sha256sum --check --ignore-missing "sha256sums"
)

# $1 : patch_index_file
parse_patch_xz_basename() {
    # shellcheck disable=SC2039
    local result=""
    result="$(
        grep -Eom1 "patch[-]${version}[.][[:digit:]]+[-]rt[[:digit:]]+([.]patch)?[.]xz" "$1" \
            | sort -uV \
            | head -n1
    )"
    if [ -z "${result}" ]; then
        error "failed to parse patch_xz_basename: $1"
        return 1
    fi
    echo "${result}"
    return 0
}

# $1 : flag_path
# rest : command
unless_exists_eval() {
    # shellcheck disable=SC2039
    local flag_path="$1"
    shift
    if [ -e "${flag_path}" ]; then
        info "already done: $*"
        return 0
    fi
    eval "$@"
    touch "${flag_path}"
}

# $1 : path to patch file
infer_package_version() {
    # shellcheck disable=SC2039
    local result=""
    result="$(basename "$1")"
    if [ "${result}" = "${result%.patch}" ]; then
        warning "missing basename suffix .patch: $1"
    fi
    result="${result%.patch}"
    if [ "${result}" = "${result#patch-}" ]; then
        error "missing basename prefix patch-: $1"
        return 1
    fi
    result="${result#patch-}"
    if ! echo "${result}" | grep -Eqx '[[:digit:]]+([.][[:digit:]]+){2,3}[-]rt[[:digit:]]+'; then
        error "bad basename package version: $1"
        return 1
    fi
    # tack on revision number because linux creates quilt package by default
    echo "${result}-1"
    return 0
}

# $1 : linux_version
infer_linux_index_uri() {
    # shellcheck disable=SC2039
    local major=""
    major="$(echo "$1" | cut -d. -f1)"
    if [ 2 -lt "${major}" ]; then
        echo "https://www.kernel.org/pub/linux/kernel/v${major}.x/"
        return 0
    fi
    # shellcheck disable=SC2039
    local minor=""
    minor="$(echo "$1" | cut -d. -f2)"
    echo "https://www.kernel.org/pub/linux/kernel/v${major}.${minor}/"
    return 0
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

if [ -z "${DEBFULLNAME:-}" ]; then
    die "undefined environement variable: DEBFULLNAME"
fi
if [ -z "${DEBEMAIL:-}" ]; then
    die "undefined environement variable: DEBEMAIL"
fi

while getopts ":hD:V:" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        D) readonly distribution="${OPTARG}" ;;
        V)
            if ! version="$(vet_version "${OPTARG}")"; then
                die "FAILURE: vet_version ${OPTARG}"
            fi
            readonly version="${version}"
            ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((OPTIND - 1))"

################################################################################

# distribution
if [ -n "${distribution:-}" ]; then
    info "distribution: ${distribution}"
elif distribution="$(detect_distribution)"; then
    readonly distribution="${distribution}"
    warning "detected distribution: ${distribution}"
else
    die "failed to get and/or detect distribution"
fi

# version
if [ -n "${version:-}" ]; then
    info "version: ${version}"
elif version="$(infer_version "${distribution}")"; then
    readonly version="${version}"
    warning "inferred version: ${version}"
else
    die "failed to get and/or infer version"
fi

################################################################################

# get the index page
readonly patch_index_uri="https://www.kernel.org/pub/linux/kernel/projects/rt/${version}/"
info "patch_index_uri: ${patch_index_uri}"
readonly patch_index_file="$(uri_dest "${patch_index_uri}")index.html"
info "patch_index_file: ${patch_index_file}"
wget_cache "${patch_index_uri}"

# parse the index page to discover patch for desired version
if ! patch_xz_basename="$(parse_patch_xz_basename "${patch_index_file}")"; then
    die "FAILURE: parse_patch_xz_basename ${patch_index_file}"
fi
info "patch_xz_basename: ${patch_xz_basename}"

# get patch
readonly patch_xz_uri="${patch_index_uri}${patch_xz_basename}"
info "patch_xz_uri: ${patch_xz_uri}"
readonly patch_xz_file="$(uri_dest "${patch_xz_uri}")"
info "patch_xz_file: ${patch_xz_file}"
wget_cache_gpgv "${patch_xz_uri}"

readonly patch_file="${patch_xz_file%.xz}"
unless_exists_eval "${patch_file}" xz -vkd "${patch_xz_file}"

# use patch file to infer package_version
if ! package_version="$(infer_package_version "${patch_file}")"; then
    die "FAILURE: infer_package_version ${patch_file}"
fi
readonly package_version="${package_version}"
info "package_version: ${package_version}"

# truncate package_version at first hyphen to get linux_version
readonly linux_version="${package_version%%-*}"
info "linux_version: ${linux_version}"

################################################################################

if ! linux_index_uri="$(infer_linux_index_uri "${linux_version}")"; then
    die "FAILURE: infer_linux_index_uri ${linux_version}"
fi
readonly linux_index_uri="${linux_index_uri}"
info "linux_index_uri: ${linux_index_uri}"

readonly linux_tarxz_uri="${linux_index_uri}linux-${linux_version}.tar.xz"
info "linux_tarxz_uri: ${linux_tarxz_uri}"
readonly linux_tarxz_file="$(uri_dest "${linux_tarxz_uri}")"
info "linux_tarxz_file: ${linux_tarxz_file}"
wget_cache_gpgv "${linux_tarxz_uri}"

if false; then
    readonly linux_tar_file="${linux_tarxz_file%.xz}"
    info "linux_tar_file: ${linux_tar_file}"
    unless_exists_eval "${linux_tar_file}" xz -vkd "${linux_tarxz_file}"
fi

readonly linux_dir="${PWD}/$(basename "${linux_tarxz_file%.tar.xz}")"
info "linux_dir: ${linux_dir}"
unless_exists_eval "${linux_dir}" tar -xf "${linux_tarxz_file}"

################################################################################

unless_exists_eval "${linux_dir}/.patched" patch \
    --forward \
    --directory "${linux_dir}" \
    --reject-file - \
    --strip 1 \
    --input "${patch_file}" >&2

################################################################################

(
    cd "${linux_dir}"

    find . -maxdepth 1 -type f -name '.config*' -exec rm -vf {} +

    cat >.config.rt <<EOF
CONFIG_DEBUG_PREEMPT=y
CONFIG_HAVE_PREEMPT_LAZY=y
CONFIG_HIGH_RES_TIMERS=y
CONFIG_HZ_1000=y
CONFIG_PREEMPT=y
CONFIG_PREEMPTION=y
CONFIG_PREEMPT_RCU=y
CONFIG_PREEMPT_RT=y
CONFIG_PREEMPT_RT_FULL=y
EOF

    cp -v "/boot/config-$(uname -r)" .config.upstream
    cp -v .config.upstream .config

    ./scripts/kconfig/merge_config.sh .config .config.rt
    ./scripts/diffconfig .config.upstream .config
    make \
        KDEB_CHANGELOG_DIST="${distribution}" \
        KDEB_PKGVERSION="${package_version}" \
        deb-pkg "$@"
    exit "$?"
)

exit "$?"
