#!/bin/sh

# scrippies/xhci-reset

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mkdir -p "${HOME}/tmp" && mktemp -d "${HOME}/tmp/${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    local status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $0 [OPTION]...
Reset all pci xhci devices -- except 0000:00:14.0

Options:

    -h                 print usage and exit

Examples:

    \$ $0

EOF
}

# $1 : xhci_hcd directory; e.g.:
# /sys/devices/pci0000:16/0000:16:00.0/0000:17:00.0/0000:18:09.0/0000:1c:00.0/
xhci_hcd_reset() {
    # https://unix.stackexchange.com/questions/73908/how-to-reset-cycle-power-to-a-pcie-device/73909#73909
    # https://unix.stackexchange.com/questions/29775/reset-a-pci-device-in-linux/42358#42358
    #
    # > What:		/sys/bus/pci/devices/.../reset
    # > Date:		July 2009
    # > Contact:	Michael S. Tsirkin <mst@redhat.com>
    # > Description:
    # > 		Some devices allow an individual function to be reset
    # > 		without affecting other functions in the same device.
    # > 		For devices that have this support, a file named reset
    # > 		will be present in sysfs.  Writing 1 to this file
    # > 		will perform reset.
    # 
    # -- https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-bus-pci

    if [ -f "${1}/reset" ]; then
        if echo "1" >"${1}/reset"; then
            return "$?"
        else
            warning "FAILURE: echo 1 >${1}/reset"
        fi
    else
        warning "missing file: ${1}/reset"
    fi

    if [ -f "${1}/power" ]; then
        if echo "0" >"${1}/power"; then
            if echo "1" >"${1}/power"; then
                return "$?"
            else
                warning "FAILURE: echo 1 >${1}/power"
            fi
        else
            warning "FAILURE: echo 0 >${1}/power"
        fi
    else
        warning "missing file: ${1}/power"
    fi

    # https://unix.stackexchange.com/questions/29775/reset-a-pci-device-in-linux/505591#505591
    if [ -f "${1}/remove" ]; then
        if echo 1 >"${1}/remove"; then
            if echo 1 >/sys/bus/pci/rescan; then
                return "$?"
            else
                warning "FAILURE: echo 1 >/sys/bus/pci/rescan"
            fi
        else
            warning "FAILURE: echo 1 >${1}/remove"
        fi
    else
        warning "missing file: ${1}/remove"
    fi

    error "cannot reset: $1"
    return 1    
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":h" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

if ! [ 0 -eq "$(id -u)" ]; then
    sudo "${this}"
    exit "$?"
fi

readonly xhci_hcd_list="$(mktemp -t xhci_hcd_list.XXXXXX)"
find /sys/bus/pci/drivers/xhci_hcd \
     -maxdepth 1 \
     -mindepth 1 \
     -name "0000:*" \
     -not -name "0000:00:14.0" \
     -exec readlink -f {} \; \
     >"${xhci_hcd_list}"
sort -uo "${xhci_hcd_list}" "${xhci_hcd_list}"

# this is another thing that doesn't work:
while read xhci_hcd; do
    xhci_hcd_reset "${xhci_hcd}"
done <"${xhci_hcd_list}"

exit "$?"

# this trick is from here:
# https://github.com/NoMagicAi/reproduce_d400_camera_issue/blob/master/src/realsense_restart_xhci.sh
#
# it makes things disappear and reappear in the `lsusb -t` output, but it
# doesn't change the speed of anything
while read xhci_hcd; do
    echo "xhci_hcd: ${xhci_hcd}"
    slot="$(basename "${xhci_hcd}")"
    echo "slot: ${slot}"
    sleep 1
    echo "${slot}" | tee /sys/bus/pci/drivers/xhci_hcd/unbind || true
    sleep 1
    echo "${slot}" | tee /sys/bus/pci/drivers/ehci-pci/unbind || true
    # sleep 1
    # echo "${slot}" | tee /sys/bus/pci/drivers/xhci_hcd/bind || true
    # sleep 1
    # echo "${slot}" | tee /sys/bus/pci/drivers/ehci-pci/bind || true
done <"${xhci_hcd_list}"

while read xhci_hcd; do
    echo "xhci_hcd: ${xhci_hcd}"
    slot="$(basename "${xhci_hcd}")"
    echo "slot: ${slot}"
    # sleep 1
    # echo "${slot}" | tee /sys/bus/pci/drivers/xhci_hcd/unbind || true
    # sleep 1
    # echo "${slot}" | tee /sys/bus/pci/drivers/ehci-pci/unbind || true
    sleep 1
    echo "${slot}" | tee /sys/bus/pci/drivers/xhci_hcd/bind || true
    # sleep 1
    # echo "${slot}" | tee /sys/bus/pci/drivers/ehci-pci/bind || true
done <"${xhci_hcd_list}"

exit "$?"
