#!/bin/sh

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

usage() {
    cat <<EOF
Usage: $0 [OPTION]... [PACKAGE]...
Build the given golang package[s] into static binaries.

Options
    -h                 print this usage and return success

Examples:

    \$ $0 -h

    \$ $0 mvdan.cc/sh/cmd/shfmt

    \$ $0 go.universe.tf/netboot/cmd/pixiecore

    \$ $0 github.com/mholt/archiver/cmd/arc

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >&2; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":h" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

# https://stackoverflow.com/questions/23513045/how-to-check-if-a-process-is-running-inside-docker-container
# https://stackoverflow.com/questions/20010199/how-to-determine-if-a-process-runs-inside-lxc-docker
if ! grep -q 'lxc\|docker' /proc/1/cgroup; then
    readonly image_name="${whatami}"
    docker build --tag "${image_name}" --file - "${here}" <<'EOF'
FROM golang:alpine
WORKDIR /tmp
RUN apk add --update gcc git musl-dev
EOF

    readonly workdir="$(mktemp -ut workdir.XXXXXX)"
    docker container run \
        --env GOCACHE=/tmp \
        --interactive \
        --mount type=bind,readonly,source="${this}",target="${this}" \
        --mount type=bind,source="${PWD}",target="${workdir}" \
        --rm \
        --user "$(id -u):$(id -g)" \
        --workdir "${workdir}" \
        "${image_name}" sh -c "${this} $@"
    exit "$?"
fi


# References
# ==========
# 
# * https://github.com/golang/go/issues/19226 : cmd/compile: Go compiled
# binaries with ldflags "-s -w" reveal too much information
#
# * https://github.com/brimstone/docker-golang-musl : a container to build
# golang static binaries with musl instead of glibc
#
# http://dominik.honnef.co/posts/2015/06/statically_compiled_go_programs__always__even_with_cgo__using_musl/
# : Statically compiled Go programs, always, even with cgo, using musl
#
# * https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies : `go help build`
#
# * https://golang.org/cmd/go/#hdr-Build_modes : `go help buildmode`
# 
# * https://golang.org/cmd/link : `go tool link -help`
# 
# * https://golang.org/cmd/compile : `go tool compile -help`

for pkg in $@; do
    /usr/local/go/bin/go get -v -d "${pkg}/..." || true

    /usr/local/go/bin/go \
        build \
        -a \
        -ldflags='-s -w -linkmode external -extldflags "-static"' \
        "${pkg}"
done
