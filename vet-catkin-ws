#!/bin/sh

# scrippies/vet-catkin-ws

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]... CATKIN_WS...
Vet the given catkin workspace(s).

Options:

    -h    print usage and exit
    -f    try to fix things

EOF
}

# $1 : pkgdir
vet_pkgdir() {
    local pkgdir="$1"
    local cmakeliststxt="$1/CMakeLists.txt"

    local incdir="$(find "${pkgdir}" -maxdepth 1 -type d -name 'inc')"
    local srcdir="$(find "${pkgdir}" -maxdepth 1 -type d -name 'src')"

    local inc_relpath_list="$(mktemp -t inc_relpath_list.XXXXXX)"
    local src_relpath_list="$(mktemp -t src_relpath_list.XXXXXX)"

    if [ -n "${incdir}" ]; then
        find "${incdir}" -type f -name '*.hpp' | sed "s|${incdir}/||g" >"${inc_relpath_list}"
    fi
    if [ -n "${srcdir}" ]; then
        find "${srcdir}" -type f -name '*.cpp' | sed "s|${srcdir}/||g" >"${src_relpath_list}"
    fi

    sort -uo "${inc_relpath_list}" "${inc_relpath_list}"
    sort -uo "${src_relpath_list}" "${src_relpath_list}"

    local xpp_list="$(mktemp -t xpp_list.XXXXXX)"

    find "${pkgdir}" -type f \( -name '*.hpp' -o -name '*.cpp' \) >"${xpp_list}"
    sort -uo "${xpp_list}" "${xpp_list}"
    while read xpp; do
        local xpp_basename="$(basename "${xpp}")"
        if ! grep -Eq "\b${xpp_basename}\b" "${cmakeliststxt}"; then
            bad_count="$((${bad_count:-0} + 1))"
            warning "${cmakeliststxt#${catkin_ws}/} MISSING: ${xpp_basename}"
            if [ "true" = "${try_fix:-false}" ]; then
                fix_count="$((${fix_count:-0} + 1))"
                info "$(rm -vf ${xpp})"
            fi
        fi
    done <"${xpp_list}"

    find "${pkgdir}" -type f \( -name '*.hpp' -o -name '*.cpp' \) >"${xpp_list}"
    sort -uo "${xpp_list}" "${xpp_list}"
    while read xpp; do
        if false && command -v clang-format >/dev/null 2>&1; then
            local xpp_clang_format="$(mktemp -t "clang_format_$(basename "${xpp}").XXXXXX")"
            clang-format "${xpp}" >"${xpp_clang_format}"
            if ! diff "${xpp}" "${xpp_clang_format}" >/dev/null; then
                bad_count="$((${bad_count:-0} + 1))"
                warning "clang-format ${xpp#${catkin_ws}/}"
                if [ "true" = "${try_fix:-false}" ]; then
                    fix_count="$((${fix_count:-0} + 1))"
                    clang-format -i "${xpp}"
                fi
            fi
        fi

        local pkgincs="$(mktemp -t pkgincs.XXXXXX)"
        local sysincs="$(mktemp -t sysincs.XXXXXX)"
        sed -nr 's|^(#include "([[:graph:]]+)")$|\2\t\1|gp' <"${xpp}" >"${pkgincs}"
        sed -nr 's|^(#include <([[:graph:]]+)>)$|\2\t\1|gp' <"${xpp}" >"${sysincs}"
        sort -uo "${pkgincs}" "${pkgincs}"
        sort -uo "${sysincs}" "${sysincs}"

        # todo: do something with *.ui files?
        sed -ri '/^ui_[[:graph:]]+\.h\t/d' "${pkgincs}"

        # todo: warn about system include generated header?
        sed -ri '/^ui_[[:graph:]]+\.h\t/d' "${sysincs}"

        # foreach `#include "foo.h"`, complain if `foo.h` not in this package
        while read pkginc match; do
            if ! echo "${pkginc}" | grep -qFf "${inc_relpath_list}"; then
                bad_count="$((${bad_count:-0} + 1))"
                warning "-I should be -isystem: ${xpp#${catkin_ws}/}:$(grep -n "${match}" "${xpp}")"
                if [ "true" = "${try_fix:-false}" ]; then
                    fix_count="$((${fix_count:-0} + 1))"
                    sed -ri "s|#include \"${pkginc}\"|#include <${pkginc}>|" "${xpp}"
                fi
            fi
        done <"${pkgincs}"

        # foreach `#include <foo.h>`, `foo.h` should NOT be in this package
        while read sysinc match; do
            if echo "${sysinc}" | grep -qFf "${inc_relpath_list}"; then
                bad_count="$((${bad_count:-0} + 1))"
                warning "-isystem should be -I: ${xpp#${catkin_ws}/}:$(grep -n "${match}" "${xpp}")"
                if [ "true" = "${try_fix:-false}" ]; then
                    fix_count="$((${fix_count:-0} + 1))"
                    sed -ri "s|#include <${sysinc}>|#include \"${sysinc}\"|" "${xpp}"
                fi
            fi
        done <"${sysincs}"

    done <"${xpp_list}"
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hf" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        f) try_fix="true" ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

for catkin_ws in ${@:-${PWD}}; do
    if ! [ -d "${catkin_ws}" ]; then
        error "missing directory: ${catkin_ws}"
        continue
    fi
    if ! [ -d "${catkin_ws}/src" ]; then
        error "missing directory: ${catkin_ws}/src"
        continue
    fi

    pkgdir_list="$(mktemp -t pkgdir_list.XXXXXX)"
    find "${catkin_ws}/src" \
        -type f -name 'CMakeLists.txt' -exec grep -l catkin_package {} + \
        | xargs dirname >"${pkgdir_list}"
    sort -uo "${pkgdir_list}" "${pkgdir_list}"

    while read pkgdir; do
        vet_pkgdir "${pkgdir}"
    done <"${pkgdir_list}"
done

if [ 0 -lt "${bad_count:-0}" ]; then
    error "BAD_COUNT: ${bad_count}"
    if [ 0 -lt "${fix_count:-0}" ]; then
        info "FIX COUNT: ${fix_count:-0}"
    fi
    exit 1
fi

exit "$?"
