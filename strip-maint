#!/bin/sh

# scrippies/strip-maint

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${here}").$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${control_tar:-}" "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]... [DPKG_ACTION]...
Stop maintainer scripts from screwing with your host.

Options:
  -h        print usage and exit
  -I DIR    install to DIR

Examples:

  # self-install to /sbin (and register as \`DPkg::Pre-Install-Pkgs\`)
  \$ $(basename ${this}) -i /sbin

  # neuter the maintainer scripts within ros-kinetic-librealsense
  \$ $(basename ${this}) ros-kinetic-librealsense

References:

  * https://gist.github.com/jordansissel/748313

EOF
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hI:" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        I) readonly install_dir="${OPTARG}" ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

if [ -n "${install_dir:-}" ]; then
    if ! [ -d "${install_dir}" ]; then
        die "missing directory: ${install_directory}"
    fi
    cp "${this}" "${install_dir}/$(basename "${this}")"
    cat >"/etc/apt/apt.conf.d/00$(basename "${this}")" <<EOF
# /etc/apt/apt.conf.d/00$(basename ${this})
#
# * apt-config file for $(basename ${this})
# * sets up hook for neutering debian package maintainer scripts
# * installed $(date -u +"%Y-%m-%dT%H:%M:%SZ")

DPkg::Pre-Install-Pkgs { "xargs -rL1 ${install_dir}/$(basename ${this})" }
EOF
fi

case "$#" in
    0) exit 0 ;;
    1) readonly deb_file="$1" ;;
    *) die "bad args" ;;
esac

if ! [ -f "${deb_file}" ]; then
    die "missing file: ${deb_file}"
fi

# > The second required member is named control.tar. It is a tar archive
# > containing the package control information, either not compressed
# > (supported since dpkg 1.17.6), or compressed with gzip (with .gz extension)
# > or xz (with .xz extension, supported since 1.17.6), as a series of plain
# > files, of which the file control is mandatory and contains the core control
# > information, the conffiles, triggers, shlibs and symbols files contain
# > optional control information, and the preinst, postinst, prerm and postrm
# > files are optional maintainer scripts. The control tarball may optionally
# > contain an entry for ‘.’, the current directory.
#
# -- https://manpages.debian.org/unstable/dpkg-dev/deb.5.en.html

if ! control_tar="$(ar -t "${deb_file}" | grep -E '^control\.tar(\.(gz|xz))?$')"; then
    die "missing control tarball: ${deb_file}"
fi
readonly control_tar="${control_tar}"

info "extracting from ${deb_file}: ${control_tar}"
ar -vx "${deb_file}" "${control_tar}"

readonly control_dir="$(mktemp -dt "$(basename "${deb_file}").control.dir.XXXXXX")"
info "extracting ${control_tar} to ${control_dir}"
tar -vxf "${control_tar}" -C "${control_dir}"

info "finding maintainer scripts in ${control_dir}"
readonly maint_script_list="$(mktemp -t maint.script.list.XXXXXX)"
find "${control_dir}" -type f -perm /111 \
    -regextype posix-extended -regex "${control_dir}/(pre|post)(inst|rm)" \
    -print >"${maint_script_list}"

if ! [ -s "${maint_script_list}" ]; then
    info "no maintainer scripts found, skipping ${deb_file}"
    exit "$?"
fi

# neuter any maintainer scripts, log what we do
while read maint_script; do
    info "found maintainer script: ${maint_script}"
    if grep -q ldconfig "${maint_script}"; then
        info "replacing with generic 'ldconfig' script: ${maint_script}"
        cat >"${maint_script}" <<'EOF'
#!/bin/sh
set -eu
case "${1:-}" in
    configure) ldconfig ;;
    remove) ldconfig ;;
    *) true ;;
esac
EOF
    else
        info "$(rm -v "${maint_script}")"
    fi
done <"${maint_script_list}"

info "rebuilding ${control_tar}"
case "${control_tar}" in
    control.tar) tar -vcf "${control_tar}" -C "${control_dir}" . ;;
    control.tar.gz) tar -vczf "${control_tar}" -C "${control_dir}" . ;;
    control.tar.xz) tar -vcJf "${control_tar}" -C "${control_dir}" . ;;
    *) die "unrecognized control tarball: ${control_tar}" ;;
esac

info "replacing ${control_tar} within ${deb_file}"
ar -vr "${deb_file}" "${control_tar}"

exit "$?"
