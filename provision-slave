#!/bin/sh

# scrippies/provision-slave

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $(basename ${this}) [DISTRIBUTION]
Configure apt to use additional repositories.

Notes:

    DISTRIBUTION defaults to \$(lsb_release --short --codename).

Examples:

    \$ $(basename ${this})           # requires lsb_release

    \$ $(basename ${this}) trusty

    \$ $(basename ${this}) xenial

    \$ $(basename ${this}) bionic
EOF
}

get_home() {
    getent passwd "$1" | cut -d: -f6
}

get_shell() {
    getent passwd "$1" | cut -d: -f7
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C
export TZ=UTC

# Install packages to allow apt to use a repository over HTTPS:
find /var/lib/apt/lists -mindepth 1 -delete
apt-get -y update
apt-get -y install --no-install-recommends \
     apt-transport-https \
     curl \
     default-jre-headless \
     lsb-release \
     nfs-common \
     ntp \
     software-properties-common \
     && true

timedatectl set-timezone UTC

systemctl enable ntp
systemctl start ntp

########################
# INSTALL DOCKER BEGIN #
########################

readonly docker_gpg="$(mktemp -t docker.gpg.XXXXXX)"
readonly docker_list="$(mktemp -t docker.list.XXXXXX)"

curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' >"${docker_gpg}"
tee >"${docker_list}" <<EOF
deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable edge
EOF

apt-key add "${docker_gpg}"
cp -v "${docker_list}" /etc/apt/sources.list.d/docker.list
chmod 0644 /etc/apt/sources.list.d/docker.list

apt-get -y update
apt-cache policy docker-ce
apt-get -y install docker-ce

service docker start && \
    echo "docker start win" || \
    echo "docker start fail"

######################
# INSTALL DOCKER END #
######################

#########################
# INSTALL GIT-LFS BEGIN #
#########################

readonly script_deb_sh="$(mktemp -t script.deb.sh.XXXXXX)"
curl -fsSL https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh >"${script_deb_sh}"
chmod +x "${script_deb_sh}"
"${script_deb_sh}"
apt-get -y install git-lfs
git lfs install --system

#######################
# INSTALL GIT-LFS END #
#######################

#######################
# JENKINS AGENT BEGIN #
#######################

readonly jenkins_home="/var/jenkins"
readonly jenkins_shell="$(command -v sh)"
readonly jenkins_auth_keys="${jenkins_home}/.ssh/authorized_keys"

if ! id -u jenkins; then
    useradd \
        --create-home \
        --groups docker \
        --home-dir "${jenkins_home}" \
        --shell "${jenkins_shell}" \
        --system \
        jenkins
fi

if ! [ "$(get_home jenkins)" = "${jenkins_home}" ]; then
    warning "changing jenkins home: $(get_home jenkins) -> ${jenkins_home}"
    usermod -m -d "${jenkins_home}" jenkins
fi

if ! [ "$(get_shell jenkins)" = "${jenkins_shell}" ]; then
    warning "changing jenkins shell: $(get_shell jenkins) -> ${jenkins_shell}"
    usermod -s "${jenkins_shell}" jenkins
fi

if ! groups jenkins | grep -q '\bdocker\b'; then
    warning "changing jenkins groups: $(groups jenkins) -> $(echo "$(groups jenkins)" docker)"
    usermod -a -G docker jenkins
fi

mkdir -vp "$(dirname "${jenkins_auth_keys}")"
cat >"${jenkins_auth_keys}" <<EOF
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC80KltG71YkbzdfNRDDBTjdm0le5LZB2tYUTbXtrQcu03MdddCGBkrB8YOcnf9WJvdxqWb2y83buDRAw3rZvRLV76ht2VFnJ85ZFbYo6CoYW7Tywlx6sTKO/Ch9CDzkpExuuiJTX5NDBOmw+APCayyRxN7YQha6zudEWApp5J4P2WoA6gXjbIErkMDBGtYL0XahLEQyQczqm0WznqA9HS2uoXw/ayNhWJZixJqjTNDj2GEDkb3yuZRVVhGagbHc/U2DOwLEBcag6ykTXvLy4z6WnRgCHGeet9iV2zlzDDYbiEWe8vcLd4PABK46+XYfFmFht2b/2tzOb9CtePX6jQt /srv/jenkins/jenkins-slave-agent-key
EOF
chown -v jenkins:jenkins "${jenkins_auth_keys}"
chmod -v 0600 "${jenkins_auth_keys}"

#####################
# JENKINS AGENT END #
#####################
