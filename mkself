#!/bin/sh

# scrippies/mkself

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Run makeself in a container.

Usage: $(basename "${this}") [args] archive_dir file_name label startup_script [script_args]

Options: see http://makeself.io

Example: $(basename "${this}") /home/joe/mysoft mysoft.sh "Joe's Nice Software Package" ./setup
EOF
}

# http://www.etalabs.net/sh_tricks.html
save() {
    for i; do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"; done
    echo " "
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

args=""
lsm_file="$(mktemp -t lsm.XXXXXX)"
header_file="$(mktemp -t header.XXXXXX)"
help_header_file="$(mktemp -t help-header.XXXXXX)"
while [ 0 -lt "$#" ]; do
    case "$1" in
        --lsm)
            if ! [ -n "${2:-}" ]; then
                die "missing: lsm_file"
            fi
            if ! lsm_file="$(readlink -f "$2")"; then
                die "missing: $2"
            fi
            if ! [ -f "${lsm_file}" ]; then
                die "not a file: ${lsm_file}"
            fi
            args="${args} $1 ${lsm_file}"
            shift 2
            continue
            ;;
        --header)
            if ! [ -n "${2:-}" ]; then
                die "missing: header_file"
            fi
            if ! header_file="$(readlink -f "$2")"; then
                die "missing: $2"
            fi
            if ! [ -f "${header_file}" ]; then
                die "not a file: ${header_file}"
            fi
            args="${args} $1 ${header_file}"
            shift 2
            continue
            ;;
        --help-header)
            if ! [ -n "${2:-}" ]; then
                die "missing: help_header_file"
            fi
            if ! help_header_file="$(readlink -f "$2")"; then
                die "missing: $2"
            fi
            if ! [ -f "${help_header_file}" ]; then
                die "not a file: ${help_header_file}"
            fi
            args="${args} $1 ${help_header_file}"
            shift 2
            continue
            ;;
        --*)
            args="${args} $1"
            shift
            continue
            ;;
        *)
            if ! [ -n "${1:-}" ]; then
                die "missing: archive_dir"
            fi
            if ! archive_dir="$(readlink -f "$1")"; then
                die "missing: $1"
            fi
            if ! [ -d "${archive_dir}" ]; then
                die "not a directory: ${archive_dir}"
            fi
            shift
            if ! [ -n "${1:-}" ]; then
                die "missing: file_name"
            fi
            if ! file_name="$(readlink -f "$1")"; then
                die "missing: $1"
            fi
            if [ -f "${file_name}" ]; then
                warning "file exists: ${file_name}"
            fi
            shift
            rest=$(save "$@")
            break
            ;;
    esac
    break
done

readonly image_name="realtimeneil/makeself"
readonly outdir="$(mktemp -dt out.d.XXXXXX)"
docker image pull "${image_name}"
docker container run \
    --interactive \
    --mount type=bind,readonly,source="${archive_dir}",target="${archive_dir}" \
    --mount type=bind,readonly,source="${header_file}",target="${header_file}" \
    --mount type=bind,readonly,source="${help_header_file}",target="${help_header_file}" \
    --mount type=bind,readonly,source="${lsm_file}",target="${lsm_file}" \
    --mount type=bind,source="${outdir}",target="${outdir}" \
    --rm \
    "${image_name}" sh <<EOF
set -eu
./makeself.sh ${args} "${archive_dir}" "${outdir}/$(basename "${file_name}")" ${rest}
chown -R $(id -u):$(id -g) "${outdir}"
EOF

cp -v "${outdir}/$(basename "${file_name}")" "${file_name}"
