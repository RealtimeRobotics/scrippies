#!/bin/sh

# scrippies/test/git2origtar

oneTimeSetUp() {
    readonly this="$(readlink -f "$0")"
    readonly here="$(dirname "${this}")"
    readonly whatami="$(basename "${this}")"
    readonly uut="$(dirname ${here})/${whatami}"
    readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"
    export TMPDIR="${tmpdir}"
    export GNUPGHOME="$(mktemp -dt GNUPGHOME.XXXXXX)"
    export GIT_COMMITTER_NAME='Unit Tester'
    export GIT_COMMITTER_EMAIL="$(whoami)@$(hostname --fqdn)"

    # https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
    readonly gpg2_gen_key="$(mktemp -t gpg2_gen_key.XXXXXX)"
    cat >"${gpg2_gen_key}" <<EOF
%echo Generating unprotected transient key...
%no-ask-passphrase
%no-protection
%transient-key
Key-Type: default
Subkey-Type: default
Name-Real: ${GIT_COMMITTER_NAME}
Name-Email: ${GIT_COMMITTER_EMAIL}
Name-Comment: unprotected transient key
Expire-Date: 0
%echo Committing...
%commit
%echo ...done.
EOF
    gpg2 --batch --gen-key "${gpg2_gen_key}"
    readonly keyid_list="$(mktemp -t keyid_list.XXXXXX)"
    gpg2 --list-secret-keys --fingerprint --with-colons >"${keyid_list}"
    cat "${keyid_list}" >&2
    export GPG_KEYID="$(sed -nr 's/^fpr:::::::::([[:xdigit:]]{40}):$/\1/p' <"${keyid_list}" | head -1)"
    echo "test" | gpg2 --clearsign
}

setUp() {
    # git_bare="$(mktemp -dt git_bare.XXXXXX)"
    # git -C "${git_bare}" init --bare
    git_work="$(mktemp -dt git_work.XXXXXX)"
    # git clone "file://${git_bare}" "${git_work}"
    (
        cd "${git_work}"
        git init .
        git config gpg.program gpg2
        git config user.name "${GIT_COMMITTER_NAME}"
        git config user.email "${GIT_COMMITTER_EMAIL}"
        git config user.signingKey "${GPG_KEYID}"
        git config commit.gpgSign true
        touch foo.txt
        git add foo.txt
        git commit -a -m 'add foo.txt'
        git tag -s -u "${GPG_KEYID}" -m 'tagging v1.2.3' 1.2.3
        git describe --long --always
        git tag --verify 1.2.3
    )
}

tearDown() {
    rm -rf "${git_bare}" "${git_work}" || true
}

# tearDown() {
oneTimeTearDown() {
    rm -rf "${tmpdir}" || true
}

# testBare() {
#     assertEquals "." "$(git -C "${git_bare}" rev-parse --git-dir)"
#     assertEquals "true" "$(git -C ${git_bare} rev-parse --is-bare-repository)"
# }

testWork() {
    assertEquals ".git" "$(git -C "${git_work}" rev-parse --git-dir)"
    assertEquals "false" "$(git -C ${git_work} rev-parse --is-bare-repository)"
}

testOutfile() {
    outfile="$(mktemp -ut outfile.XXXXXX)"

    assertFalse "[ -f ${outfile} ]" "[ -f ${outfile} ]"
    assertTrue \
        "${uut} -C ${git_work} -o ${outfile}" \
        "${uut} -C ${git_work} -o ${outfile}"

    assertTrue "[ -f ${outfile} ]"
    assertFalse \
        "${uut} -C ${git_work} -o ${outfile}" \
        "${uut} -C ${git_work} -o ${outfile}"

    assertTrue \
        "${uut} -f -C ${git_work} -o ${outfile}" \
        "${uut} -f -C ${git_work} -o ${outfile}"
}

testPackage() {
    (
        cd "$(mktemp -d)"
        assertTrue \
            "${uut} -C ${git_work} -P my-package" \
            "${uut} -C ${git_work} -P my-package"
        outfile="$(find "${PWD}" -type f -name '*.orig.tar')"
        assertEquals "my-package" "$(basename "${outfile}" .orig.tar | cut -d_ -f1)"
    )
}

testVersion() {
    (
        cd "$(mktemp -d)"
        assertTrue \
            "${uut} -C ${git_work} -V 2.4.6-8-gfffffff" \
            "${uut} -C ${git_work} -V 2.4.6-8-gfffffff"
        outfile="$(find "${PWD}" -type f -name '*.orig.tar')"
        assertEquals "2.4.6-8-gfffffff" "$(basename "${outfile}" .orig.tar | cut -d_ -f2)"
    )
}

testTags() {
    (
        cd "$(mktemp -d)"
        assertTrue \
            "${uut} -C ${git_work}" \
            "${uut} -C ${git_work}"
        outfile="$(find "${PWD}" -type f -name '*.orig.tar')"
        assertEquals "1.2.3-0" "$(basename "${outfile}" .orig.tar | cut -d_ -f2 | cut -d- -f1-2)"
    )
}

# Load shUnit2.
. "$(dirname $(readlink -f $0))/shunit2/shunit2"
