#!/bin/sh

# scrippies/configure-apt

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${here}").$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF
Usage: $0 [OPTION]... [DISTRIBUTION]
Configure apt to use additional repositories.

Notes:
    DISTRIBUTION defaults to \$(lsb_release --short --codename).

Options:
    -h    print usage and exit
    -A    install everything (this is the default)
    -K    install public keys only
    -L    install apt sources list files only
    -I    use intranet mirrors (implies -X)
    -X    "excise" first (backup and remove /etc/apt/sources.list)
    -Z    "zap" first (backup and remove every /etc/apt/sources.list.d/*.list)

Examples:

    # discover distribution, install everything:
    \$ $0
    \$ $0 -A

    # discover distribution, install public keys only
    \$ $0 -K

    # discover distribution, install apt sources list files only
    \$ $0 -L

    # discover distribution, install everything, use intranet mirrors
    \$ $0 -I
    \$ $0 -IX
    \$ $0 -AI
    \$ $0 -AIX

    \$ $0 trusty

    \$ $0 xenial

    \$ $0 bionic

EOF
}

apt_config_path() {
    cut -d= -f2 | xargs -n1 | paste -sd/ | xargs readlink -f
}

etc_apt_sources_list() {
    apt-config shell _ Dir _ Dir::Etc _ Dir::Etc::sourcelist | apt_config_path
}

etc_apt_sources_list_d() {
    apt-config shell _ Dir _ Dir::Etc _ Dir::Etc::sourceparts | apt_config_path
}

# read stdin (assumed to be apt sources list file body) into the given apt
# sources list file
#
# $1 : listfile to be written
read_into_listfile() {
    info "installing: $1"
    if [ -f "$1" ]; then
        warning "file exists: $1"
        warning "$(mv -v $1 $1.backup)"
    fi
    cat >"$1" <<EOF
# $1
#
# This is a generated apt sources list file.
#
# https://wiki.debian.org/SourcesList
#
# generator : ${this}
# user      : $(id)
# uname     : $(uname -a)
# date      : $(date -u +"%Y-%m-%dT%H:%M:%SZ")

EOF
    cat >>"$1"
}

# 3.282 Portable Filename Character Set
# https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282
filenamify() {
    printf "$@" | tr -sc '[:alnum:]._-' '_'
}

# read stdin (assumed to be apt sources list file body) into a generated apt
# sources list file named for the given url
#
# $1 : url from which to generate apt sources list file name
read_into_generated() {
    read_into_listfile "$(etc_apt_sources_list_d)/$(filenamify "$1").list"
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hAKLIXZ" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        A)
            install_keys="true"
            install_lists="true"
            ;;
        K) install_keys="true" ;;
        L) install_lists="true" ;;
        I)
            use_intranet="true"
            excise="true"
            ;;
        X) excise="true" ;;
        Z) zap="true" ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

case "$#" in
    0)
        warning "missing distribution; will attempt to discover"
        if ! command -v lsb_release >/dev/null 2>&1; then
            die "missing program: lsb_release"
        fi
        if ! distribution="$(lsb_release --short --codename)"; then
            die "failure: lsb_release --short --codename"
        fi
        readonly distribution="${distribution}"
        info "discovered distribution: ${distribution}"
        ;;
    1)
        readonly distribution="$1"
        ;;
    *)
        die "bad args"
        ;;
esac

if [ "true" = "${install_keys:-false}" ]; then
    info "will install keys"
elif [ "true" = "${install_lists:-false}" ]; then
    info "will install lists"
else
    install_keys="true"
    install_lists="true"
    info "will install keys"
    info "will install lists"
fi

if [ "true" = "${excise:-false}" ]; then
    if [ -f "$(etc_apt_sources_list)" ]; then
        mv -v "$(etc_apt_sources_list)" "$(etc_apt_sources_list).backup"
    fi
fi

if [ "true" = "${zap:-false}" ]; then
    find "$(etc_apt_sources_list_d)" -type f -name '*.list' -exec mv -v {} {}.backup \;
fi

if [ "true" = "${install_keys:-false}" ]; then
    if ! command -v gpg >/dev/null 2>&1; then
        die "missing program: gpg"
    fi
    info "gpg path: $(command -v gpg)"
    info "gpg version: $(gpg --version)"
fi

if [ "true" = "${install_keys:-false}" ]; then
    # The following heredoc is the ASCII-armored gpg pubkey from ROS. It's used
    # to verify the debian packages therefrom. It was acquired like this:
    #
    # # apt-key adv \
    # > --keyserver hkp://ha.pool.sks-keyservers.net:80 \
    # > --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
    #
    # It was exported like this:
    #
    # # apt-key export rosbuild@ros.org
    #
    # Reference: http://wiki.ros.org/kinetic/Installation/Ubuntu
    info "installing public key: ROS"
    apt-key add --verbose - <<'EOF'
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQGiBEsy5KkRBADJbDSISoamRM5AA20bfAeBuhhaI+VaiCVcxw90sq9AI5lIc42F
WzM2acm8yplqWiehAqOLKd+iIrqNGZ+VavZEPTx7o06UZUMRoPBiTFaCwrQ5avKz
lt7ij8PRMVWNrJ7A2lDYXfFQVV1o3Xo06qVnv0KLLUmiur0LBu4H/oTH3wCgt+/I
D3LUKaMJsc77KwFBTjHB0EsD/26Z2Ud12f3urSNyN6VMWnP3rz6xsmtY4Qsmkbnr
JuduxCQBZv6bX1Cr2ulXkv0fFOr+s5OyUv7zyCPbxiJFh3Br7fJGb0b5/M208KPe
giITY9hMh/aUbKjXCPoOXPxSL6SWOWV8taR6903EFyLBN0qno/kXIBKnVqBZobgn
jIEPA/0fTnxtZtE7EpirGQMF2caJfv7/LCgXmRs9xAhgbE0/caoa1tnc79uaHmLZ
FtbGFoAO31YNYM/IUHtmabbGdvZ4oYUwDhjBevVvC7aI+XhuNGK5mU8qCLLSEUOl
CUr6BJq/0iFmjwjmwk9idZEYhqSNy2OoYJbq45rbHfbdKLEVrbQeUk9TIEJ1aWxk
ZXIgPHJvc2J1aWxkQHJvcy5vcmc+iGAEExECACAFAksy5KkCGwMGCwkIBwMCBBUC
CAMEFgIDAQIeAQIXgAAKCRBVI7rusB+hFmk7AJ0XsLp05KA8l3YzAumZfjSN04MZ
jQCfQHfp4aQUXdOCUtetVo0QZUX3IuO5Ag0ESzLkrhAIAOCuSC83VXYWf8gOMSzd
xwpsH/uLV9Wze2LGnajsJLjEOhcsz2BHfxqNXhYaE9aQaodPCpbUAkPq8tLbpXy0
SWRCx0F5RcplXx5vIWbP6TlfPbRpK70w7IWd6vsNrjwEHjlhOLcNcj42sp5pgx4b
dceK06k5Ml2hYovPnD9o2TYgjOqg5FHZ2g1J0103n/66bN/hZnpLaZJYQiPWCyq6
K0565i1k2Y7hgWB/OXqwaqCehqmLTvpyQGzE1UJvKLuYU+T+4hBnSPbT3KIi5fCz
lIwvxijOMcfbkLhzYQXcU0Rd1VItcd5nmPL4z97jBxzuhkgxXpGR4WGKhvsA2Z9Y
UtsAAwYH/3Bf44bTpD9bVADUdab3e7zm8iHfh9K/a83mIgDB7mHV6WuemQVTf/1d
eu4mI5WtpbOCoucybGfjGIIAcSxwIx6VfC7HSp4J51bOpHhbdDffUEk6QVsZjwoF
yn3W9W3ZVeTI+ch/Qoo5a98SnmdjN8eXI/qCuiXOHc6rXDXc2R0iox/1EAS8xGVd
cYZe7IWBO2CjCknyhLrWxZHoy+i1GCZ9KvPF/Ef2dmLhCydT73ZlumsY8N5vm76Q
ul1G7f8LNbnMgXQafRkPffrAXSVhGY3Z2IiBwFNgxcKTq479l7yedYRGeU1A+SYI
YmRFWHXt3rTkMlQSpxCsB0fAYfrwEqqISQQYEQIACQUCSzLkrgIbDAAKCRBVI7ru
sB+hFpryAJ9qNz3h3ijt9TkAV0CHufsPT6Cl4gCglfg7tJn2lsSF3HTpoDDO1Fgg
x9o=
=AGYp
-----END PGP PUBLIC KEY BLOCK-----
EOF

    # The following heredoc is a Canonical-provided gpg pubkey in ascii
    # armor. As of this writing, this pubkey is...
    #
    # * _not_ shipped with Bionic (18.04) distributions
    #
    # * required to verify signatures on some older packages that still bear
    #   signatures made with the associated privkey
    #
    # This pubkey was acquired like this:
    #
    # # apt-key adv --keyserver keyserver.ubuntu.com --recv 0x40976EAF437D05B5
    #
    # It was exported like this:
    #
    # $ apt-key adv --armor --export --export-options=export-minimal 0x40976EAF437D05B5
    info "installing public key: Canonical"
    apt-key add --verbose - <<'EOF'
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQGiBEFEnz8RBAC7LstGsKD7McXZgd58oN68KquARLBl6rjA2vdhwl77KkPPOr3O
YeSBH/voUsqausJfDNuTNivOfwceDe50lbhq52ODj4Mx9Jg+4aHn9fmRkIk41i2J
3hZiIGPACY/FsSlRq1AhBH2wZG1lQ45W/p77AeARRehYKJP9HY+1h/uihwCgrVE2
VzACJLuZWHbDsPoJaNQjiFcEAKbUF1rMyjd1xJM7bZeXbs8c+ohUo/ywSI/OIr8n
OfUswy08tsCof1KU0JBGLBCn0lHAYkAAcSr2pQ+k/odwdLQSjgm/JcUbi2ll16Wy
7qFbUAUJ5xO+iP61vL3z4pJGcK1pMH6kBLA4CPBchJU/hh3f7vtX2oFdWw8tWqvm
m/W7BACE7h0p86OP2G3ZJBjNYNQTK1LFYa+3G0spsVi9wl+Ih49ImPbSsUc2CSMA
fDlGpYU8FuUKCgQnS3UZz6e0NwrHbZTHBy0ksRwT9jf7qSAEKEN2ECxfwR5i1dU+
Yi4owkqGPhTLAbwkYdZZMcqfGgTXbiU4uy8DzMH/VhqP5wxdwbQ7VWJ1bnR1IEFy
Y2hpdmUgQXV0b21hdGljIFNpZ25pbmcgS2V5IDxmdHBtYXN0ZXJAdWJ1bnR1LmNv
bT6IXgQTEQIAHgUCQUSfPwIbAwYLCQgHAwIDFQIDAxYCAQIeAQIXgAAKCRBAl26v
Q30FtSTNAJ9TwRBI9/dXHqsyx5LkWrPxyO2H7wCfXDY77HnwSK3tTqJzC4m6KuDd
Rhe5Ag0EQUSfRxAIAMglvR9L60xR65i2QG4k2CnqZhmRUaTySxwOlNqKWtokUpzf
8WmqA383uRLO8W9Tee1aF7KEMEUXgFiP7nns0kroKGLlcLbC+nEzkv51ao6Lcr5d
Wr0817LmlvCl2N1KeQDkpHIAiS0LTjuEFY1yosi2ECiOan6sgcLaVqJVbEUeIaYJ
OiZ8O1INTAGGdpVoSPvgkuZVKhP2uMIhYq3qgs6sB5SshEaKAGYIiH3lZ6UJUIVE
uyumxpNPqkJ1Jkpo4SxIwy8KYiQ9Uo1NPP8bmvyGGaeWbRObLPHCO+iqxHxMiE4x
X08sVizxA1YLw9iwtdNPOWkQsM9rn8W/gieH0SsAAwYIAMLzDICy2IA1wcmf5XPp
g4JBFuMjeg8pIuaQZMf/MO2u+RlOVrIXPVFtYOpxQR9C1gCg+Blg2qQXBNw19cNT
2EtSGi0HtycTww2xnIOnaLOzq/eI/LnakdAMclaTVbNltraepkoRFE4Exvuq/tCd
zssotnmAha1tzGf+O3QyxkIBJ6zHFTNCREGBPYi/Pe9iviWqNAIr3SPhlw7STFrV
Dgpne9VdpOZb3nVYYQHG6iwvVwzrE23+84RMFENq4Dhyx9L8R6+PMt347uT8dB03
PXMovOpwXX06zMgfGwF60TZsmHqun/E3gE46YiME26rmUX5KSNTm9N2IZA8jz/sF
Xz2ISQQYEQIACQUCQUSfRwIbDAAKCRBAl26vQ30FtdxYAJsFjU+xbex7gevyGQ2/
mhqidES4MwCggqQyo+w1Twx6DKLF+3rF5nf1F3Q=
=2m5N
-----END PGP PUBLIC KEY BLOCK-----
EOF
fi

if [ "true" = "${install_lists:-false}" ]; then
    # rando filesystem-resident apt repositories; I need some convention for
    # where to put such things, so here's this:
    find "/var/packages" -type f -name 'Packages' -exec dirname {} + \
        | sort -u \
        | while read repodir; do
        (
            cd "${repodir}"
            read_into_generated "file://${PWD}" <<EOF
deb     [trusted=yes] file://${PWD} ./
EOF
        )
    done

    # ros
    if [ "true" = "${use_intranet:-false}" ]; then
        readonly ros_url="http://10.164.5.14/apt/ros/${distribution}"
    else
        readonly ros_url="http://packages.ros.org/ros/ubuntu"
    fi
    info "ros_url: ${ros_url}"
    read_into_generated "${ros_url}" <<EOF
deb     ${ros_url} ${distribution} main
deb-src ${ros_url} ${distribution} main
EOF

    # ubuntu
    if [ "true" = "${use_intranet:-false}" ]; then
        readonly ubuntu_url="http://10.164.5.14/apt/ubuntu/${distribution}"
    else
        readonly ubuntu_url="http://archive.ubuntu.com/ubuntu"
    fi
    info "ubuntu_url: ${ubuntu_url}"

    # /etc/apt/sources.list XOR /etc/apt/sources.list.d/ubuntu.list
    if [ -f "$(etc_apt_sources_list)" ]; then
        warning "file exists: $(etc_apt_sources_list)"
        warning "skipping install: ${ubuntu_url}"
    else
        read_into_generated "${ubuntu_url}" <<EOF
deb     ${ubuntu_url} ${distribution} main restricted universe multiverse
deb     ${ubuntu_url} ${distribution}-backports main restricted universe multiverse
deb     ${ubuntu_url} ${distribution}-security main restricted universe multiverse
deb     ${ubuntu_url} ${distribution}-updates main restricted universe multiverse

deb-src ${ubuntu_url} ${distribution} main restricted universe multiverse
deb-src ${ubuntu_url} ${distribution}-backports main restricted universe multiverse
deb-src ${ubuntu_url} ${distribution}-security main restricted universe multiverse
deb-src ${ubuntu_url} ${distribution}-updates main restricted universe multiverse

deb     ${ubuntu_url} ${distribution} main/debian-installer restricted/debian-installer universe/debian-installer multiverse/debian-installer

# todo: fix this
#deb     ${ubuntu_url} ${distribution}-updates main/debian-installer restricted/debian-installer universe/debian-installer multiverse/debian-installer

EOF
    fi
fi

exit "$?"
