#!/bin/sh

# scrippies/wrap-catkin

set -euvx

this="$(readlink -f "$0")"
readonly this="${this}"
whatami="$(basename "${this}")"
readonly whatami="${whatami}"
tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"
readonly tmpdir="${tmpdir}"

log() { echo "${whatami}[$$]: $*" >&2; }
error() { log "ERROR: $*"; }
warning() { log "WARNING: $*"; }
info() { log "INFO: $*"; }

die() {
    error "$*"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    return "${status}"
}

usage() {
    cat <<EOF

Usage: $0 -- [CATKIN_ARG]... [CATKIN_OPT]...
Wrap an invocation to catkin with some super-verbose options.

Examples:

    \$ $0

    \$ $0 build rtr_toolkit

    \$ $0 run_tests rtr_math --no-deps

Caveats:

    * assumes GNU make

EOF
}

# Run the given command in a subshell piped to sed because (1.) we can protect
# the terminal from the given command and (2.) we can nuke all of the ANSI
# escape codes. Because the subshell can't modifiy variables in its parent, we
# have to write the colcon exit status into a temporary file and read it after
# exiting the subshell.
#
# References:
#
# * https://en.wikipedia.org/wiki/ANSI_escape_code
# * https://unix.stackexchange.com/a/14699
# * https://unix.stackexchange.com/a/55547
deansi_eval() {
    # shellcheck disable=SC2039
    local return_code=""
    return_code="$(mktemp -t return_code.XXXXXX)"
    if eval "$@"; then
        echo "$?" >"${return_code}"
    else
        echo "$?" >"${return_code}"
    fi | sed 's/\x1b\[[0-9;?]*[JKmsu]//g'
    return "$(
        xargs <"${return_code}"
        rm -f "${return_code}"
    )"
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":h" opt; do
    case "${opt}" in
        h)
            usage
            exit 0
            ;;
        :) die "missing argument: -${OPTARG}" ;;
        \?) die "bad option: -${OPTARG}" ;;
    esac
done
shift "$((OPTIND - 1))"

deansi_eval catkin "$@" \
    --no-color \
    --no-notify \
    --no-status \
    --summarize \
    --verbose \
    --cmake-args \
    -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-RelWithDebInfo}" \
    -DCMAKE_CPP_FLAGS="${CPPFLAGS:-}" \
    -DCMAKE_CXX_COMPILER="${CXX:-$(command -v c++)}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS:-}" \
    -DCMAKE_C_COMPILER="${CC:-$(command -v cc)}" \
    -DCMAKE_C_FLAGS="${CFLAGS:-}" \
    -DCMAKE_VERBOSE_MAKEFILE=true \
    -- \
    --make-args \
    "${MAKEFLAGS:- --jobs=$(((1 + $(nproc)) / 2)) --load-average=$(nproc)}" \
    --

exit "$?"
